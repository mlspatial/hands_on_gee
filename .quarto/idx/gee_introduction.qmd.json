{"title":"Getting Started","markdown":{"yaml":{"title":"Getting Started"},"headingText":"Setup","containsRefs":false,"markdown":"\n\n\n\n* Make sure you have a Google Account.\n* Go to [https://code.earthengine.google.com](https://code.earthengine.google.com/)\n\n* Make yourself familiar wit the Google Earth Engine interface.\n* You should find the following GEE Web Editor Functionalities:\n\t* Scripts, Docs, Assets\n\t* Code editor\n\t* Inspector, Console, Tasks\n\t* Map\n\n* Download the [example shapefile of the Amtsvenn](./data/amtsvenn.zip)\n\n* Upload it as a asset in Google Earth Engine.\n  * Assets\n  * Add a project\n  * New -> Shapefile -> Amtsvenn.zip\n  * Klick on it to get its path\n\n## Feature collections\n\nFeature collections in GEE are essentially vector data (e.g. our Amtsvenn Shape).\nYou can load and visualize a feature collection with the following code snippet.\nPlease note that in my Example, the project where my asset is stored is called 'gee-tutorial' and your path might be different.\n\n\n```js\nvar aoi = ee.FeatureCollection(\"projects/gee-tutorial/assets/amtsvenn\");\n\nprint(\"Amtsvenn\", aoi)\nMap.addLayer(aoi, {}, \"Amtsvenn\")\n\nvar vis = {color: \"red\"} // {} is a dictionary in javascript\nMap.addLayer(aoi, vis, \"Amtsvenn in red\")\n```\n\n\n\n:::: {.column-margin}\n:::{.callout-note}\n## var\nTo declare a new variable in java script use the term `var` before the variable name.\n:::\n\n:::{.callout-note}\n## console output\n`print` outputs something in the Console tab.\n\n:::\n:::{.callout-note}\n## map output\n`Map.addLayer` uses three input parameters in this example:\n* the object to visualize\n* visualization parameters (as a dictionary)\n* the layer name\nUse the Docs panel and search for `Map.addLayer` in order to find more information.\n\n:::\n::::\n\n\n## Image collections\n\nImage collections are why we want to use GEE in the first place. An Image collection is basically the entire *collection* of satellite images of a certain sensor.\nE.g. the image collection \"LANDSAT/LC08/C02/T1_L2\" consists of all the Landsat 5 images from 1984 to 2012 of the entire globe. One such image can then consist of multiple bands, in the Landsat 5 case, the surface reflectance of certain wavelengths.\nEvery image collections has a description page [e.g. for the L8 collection](https://developers.google.com/earth-engine/datasets/catalog/LANDSAT_LC08_C02_T1_L2). You can find an overview of existing image collection in the [Dataset Catalogue](https://developers.google.com/earth-engine/datasets).\n\n\n```js\n\nvar aoi = ee.FeatureCollection(\"projects/gee-tutorial/assets/amtsvenn\");\n\n// load full image collection: doesnt work, to big\nvar l8 = ee.ImageCollection(\"LANDSAT/LC08/C02/T1_L2\")\nprint(l8, \"Full Landsat\")\n\n```\n\nThe first thing we want to do is using `filter` functions to reduce the Image Collection to only include images that are in the area and time frame we want to investigate.\n\n\n```js\n\nvar aoi = ee.FeatureCollection(\"projects/gee-tutorial/assets/amtsvenn\");\n\n// built in filter functions\nvar l8 = ee.ImageCollection(\"LANDSAT/LC08/C02/T1_L2\")\n  .filterBounds(aoi)\n  .filterDate(\"2021-01-01\", \"2021-12-01\")\n\n\nprint(l8, \"Amtsvenn Landsat\")\nMap.addLayer(l8, {}, \"Amtvenn\")\n\n```\n\n:::: {.column-margin}\n:::{.callout-note}\n## daisy chain\nYou can use the `.` to chain functions together\n\n:::\n::::\n\nIn the Console output you can see, that there are 24 images left in the collection after the filtering.\nIf you have a look at the map, you can also see that two neighboring Landsat Images in the Collection contain parts of the Amtsvenn. Here, the structure of an GEE Image Collection gets clear. We did not crop any image with `filterBound`. The Landsat Images are still in the collection in their full extent.\n\n\nIf you have a look at the console output again, click on the printed Image Collection. You can see that the Image Collection has `features` and `properties`. The `features` of an image collection are the images, so in this case, the 24 Landsat 8 scenes of 2021 for the Amtsvenn area. The `properties` are metadata, so in this case, information about the image collection.\n\nIf you click on `features`, you can get a list of the images in the collection. Click on one image. Now you can see, that the image has `bands` and `properties`. In this example, each Landsat 8 image has 19 bands and 92 properties. Again, `properties` contains metadata for each image, e.g. `DATE_ACQUIRED`. These image properties (NOT image collection properties) we can use for additional filtering. For example to implement a simple cloud threshold with the property `CLOUD_COVER`:\n\n\n```js\n// filter functions based on image properties\nvar l8_cloudfree = l8.filter(ee.Filter.lt('CLOUD_COVER', 30))\nprint(l8_cloudfree, \"Amtsvenn Cloudfree\")\n\n```\n\nTo reduce each image to specific bands, you can use the `select` function.\n\n\n\n```js\n// filter functions based on image properties\nvar l8_bands = l8_cloudfree.select(\"SR_B4\", \"SR_B5\")\nprint(l8_bands, \"Amtsvenn bands 4 & 5\")\n\n```\n\n\n## Vegetation indices\n\nTo calculate a vegetation index (e.g. the old faithful NDVI) there is the function `normalizedDifference`. If you search for this function in the docs panel, it gives you the following description:\n\n> Computes the normalized difference between two bands. If the bands to use are not specified, uses the first two bands. The normalized difference is computed as (first âˆ’ second) / (first + second)\n\nIt is important to understand that the `normalizedDifference` function works with an `image` as you can see by the argument `this:input (Image): The input image`.\nApplying the normalized difference function to a `ImageCollection` will not work. \n\n\n```js\n\n// normalizedDifference on a imageCollection will throw an error:\n// var ndvi_error = l8_bands.normalizedDifference([\"SR_B4\", \"SR_B5\"])\n\n\nvar ndvi = l8_bands.first().normalizedDifference([\"SR_B4\", \"SR_B5\"])\n\nprint(ndvi, \"NDVI single image\")\nMap.addLayer(ndvi, {}, \"NDVI\")\n```\n\n\n:::: {.column-margin}\n:::{.callout-note}\n## first\nThe `.first()` function will simply return the first image in the image collection.\n:::\n::::\n\n### Map functions\n\nIn order to apply a function to all the images in the image collection, we have to use the `.map` function.\nThe clearest way to use `.map` is to define a function beforehand with an image as an input argument and a return as in the following code snippet.\n\n```js\n// define function for NDWI for one image\nvar ndvi_function = function(img){\n  var ndvi = img.normalizedDifference([\"SR_B4\", \"SR_B5\"]).rename(\"NDVI\")\n  return img.addBands(ndvi)\n}\n\n\n// apply function to the first image\nvar ndvi = l8_bands.first().ndvi_function()\nprint(ndvi, \"NDVI single image\")\nMap.addLayer(ndvi, {}, \"B4, B5, NDVI\")\n```\n\n:::: {.column-margin}\n:::{.callout-note}\n## rename\nWith `.rename` you can give a new name to a band\n:::\n\n:::{.callout-note}\n## return\n`return img.addBands(ndvi)` means, that the output of this function is the original image with an added ndvi band.\n:::\n::::\n\n\n\n\nThe defined `ndvi_function` can then be applied to all images in the image collection with `.map` like this:\n\n\n```js\n// apply the function to all the images with map\nvar l8_ndvi = l8_bands.map(ndvi_function)\nprint(l8_ndvi)\n```\n\n## Export\n\nIf you search for \"Export\" in the docs panel, you should see that a `ImageCollection` cannot be exported out of Google Earth Engine. Instead, we have to convert out image collection to a single image (with multiple bands) in order to Export it to Google Drive, where we then can download the image for further analysis. With `clip` we also can finally reduce the image to just our area of interest. If you use `Export.image.toDrive` and your script works without error, the tasks panel should turn yellow and a new export task should appear there. Click on `Run` to actually start your script on the Google Servers and create an output in your Google Drive.\n\n```js\nvar l8_export = l8_ndvi.select(NDVI)\n                  .sort(\"system:time_start\")\n                  .toBands()\n                  .clip(aoi)\n\nExport.image.toDrive(\n  {image: l8_export,\n  scale: 30,\n  region: aoi\n  }\n)\n\n\n```\n\n\n\n## Code Summary\n\nHere is a condensed version of this tutorial.\n\n```js\n\n// area of interest\nvar aoi = ee.FeatureCollection(\"projects/gee-tutorial/assets/amtsvenn\");\n\n// define function for ndvi for one image\nvar ndvi_function = function(img){\n  var ndvi = img.normalizedDifference([\"SR_B4\", \"SR_B5\"]).rename(\"NDVI\")\n  return img.addBands(ndvi)\n}\n\n\n// Image Collection filtering, select bands and calculate ndvi\nvar l8 = ee.ImageCollection(\"LANDSAT/LC08/C02/T1_L2\")\n  .filterBounds(aoi)\n  .filterDate(\"2021-01-01\", \"2021-12-01\")\n  .filter(ee.Filter.lt('CLOUD_COVER', 30))\n  .select(\"SR_B5\", \"SR_B6\")\n  .map(ndvi_function)\n  .select(\"NDVI\")\n\n\nprint(l8, \"ImageCollection\")\n\n// image collection to multiband image\nvar ndvi_ts = l8.sort(\"system:time_start\").toBands().clip(aoi)\n\nprint(ndvi_ts, \"Multiband Image\")\nMap.addLayer(ndvi_ts, {}, \"NDVI) \n\n// Export\nExport.image.toDrive(\n  {image: ndvi_ts,\n  scale: 30,\n  region: aoi\n  }\n)\n\n```\n\n\n\n","srcMarkdownNoYaml":"\n\n## Setup\n\n\n* Make sure you have a Google Account.\n* Go to [https://code.earthengine.google.com](https://code.earthengine.google.com/)\n\n* Make yourself familiar wit the Google Earth Engine interface.\n* You should find the following GEE Web Editor Functionalities:\n\t* Scripts, Docs, Assets\n\t* Code editor\n\t* Inspector, Console, Tasks\n\t* Map\n\n* Download the [example shapefile of the Amtsvenn](./data/amtsvenn.zip)\n\n* Upload it as a asset in Google Earth Engine.\n  * Assets\n  * Add a project\n  * New -> Shapefile -> Amtsvenn.zip\n  * Klick on it to get its path\n\n## Feature collections\n\nFeature collections in GEE are essentially vector data (e.g. our Amtsvenn Shape).\nYou can load and visualize a feature collection with the following code snippet.\nPlease note that in my Example, the project where my asset is stored is called 'gee-tutorial' and your path might be different.\n\n\n```js\nvar aoi = ee.FeatureCollection(\"projects/gee-tutorial/assets/amtsvenn\");\n\nprint(\"Amtsvenn\", aoi)\nMap.addLayer(aoi, {}, \"Amtsvenn\")\n\nvar vis = {color: \"red\"} // {} is a dictionary in javascript\nMap.addLayer(aoi, vis, \"Amtsvenn in red\")\n```\n\n\n\n:::: {.column-margin}\n:::{.callout-note}\n## var\nTo declare a new variable in java script use the term `var` before the variable name.\n:::\n\n:::{.callout-note}\n## console output\n`print` outputs something in the Console tab.\n\n:::\n:::{.callout-note}\n## map output\n`Map.addLayer` uses three input parameters in this example:\n* the object to visualize\n* visualization parameters (as a dictionary)\n* the layer name\nUse the Docs panel and search for `Map.addLayer` in order to find more information.\n\n:::\n::::\n\n\n## Image collections\n\nImage collections are why we want to use GEE in the first place. An Image collection is basically the entire *collection* of satellite images of a certain sensor.\nE.g. the image collection \"LANDSAT/LC08/C02/T1_L2\" consists of all the Landsat 5 images from 1984 to 2012 of the entire globe. One such image can then consist of multiple bands, in the Landsat 5 case, the surface reflectance of certain wavelengths.\nEvery image collections has a description page [e.g. for the L8 collection](https://developers.google.com/earth-engine/datasets/catalog/LANDSAT_LC08_C02_T1_L2). You can find an overview of existing image collection in the [Dataset Catalogue](https://developers.google.com/earth-engine/datasets).\n\n\n```js\n\nvar aoi = ee.FeatureCollection(\"projects/gee-tutorial/assets/amtsvenn\");\n\n// load full image collection: doesnt work, to big\nvar l8 = ee.ImageCollection(\"LANDSAT/LC08/C02/T1_L2\")\nprint(l8, \"Full Landsat\")\n\n```\n\nThe first thing we want to do is using `filter` functions to reduce the Image Collection to only include images that are in the area and time frame we want to investigate.\n\n\n```js\n\nvar aoi = ee.FeatureCollection(\"projects/gee-tutorial/assets/amtsvenn\");\n\n// built in filter functions\nvar l8 = ee.ImageCollection(\"LANDSAT/LC08/C02/T1_L2\")\n  .filterBounds(aoi)\n  .filterDate(\"2021-01-01\", \"2021-12-01\")\n\n\nprint(l8, \"Amtsvenn Landsat\")\nMap.addLayer(l8, {}, \"Amtvenn\")\n\n```\n\n:::: {.column-margin}\n:::{.callout-note}\n## daisy chain\nYou can use the `.` to chain functions together\n\n:::\n::::\n\nIn the Console output you can see, that there are 24 images left in the collection after the filtering.\nIf you have a look at the map, you can also see that two neighboring Landsat Images in the Collection contain parts of the Amtsvenn. Here, the structure of an GEE Image Collection gets clear. We did not crop any image with `filterBound`. The Landsat Images are still in the collection in their full extent.\n\n\nIf you have a look at the console output again, click on the printed Image Collection. You can see that the Image Collection has `features` and `properties`. The `features` of an image collection are the images, so in this case, the 24 Landsat 8 scenes of 2021 for the Amtsvenn area. The `properties` are metadata, so in this case, information about the image collection.\n\nIf you click on `features`, you can get a list of the images in the collection. Click on one image. Now you can see, that the image has `bands` and `properties`. In this example, each Landsat 8 image has 19 bands and 92 properties. Again, `properties` contains metadata for each image, e.g. `DATE_ACQUIRED`. These image properties (NOT image collection properties) we can use for additional filtering. For example to implement a simple cloud threshold with the property `CLOUD_COVER`:\n\n\n```js\n// filter functions based on image properties\nvar l8_cloudfree = l8.filter(ee.Filter.lt('CLOUD_COVER', 30))\nprint(l8_cloudfree, \"Amtsvenn Cloudfree\")\n\n```\n\nTo reduce each image to specific bands, you can use the `select` function.\n\n\n\n```js\n// filter functions based on image properties\nvar l8_bands = l8_cloudfree.select(\"SR_B4\", \"SR_B5\")\nprint(l8_bands, \"Amtsvenn bands 4 & 5\")\n\n```\n\n\n## Vegetation indices\n\nTo calculate a vegetation index (e.g. the old faithful NDVI) there is the function `normalizedDifference`. If you search for this function in the docs panel, it gives you the following description:\n\n> Computes the normalized difference between two bands. If the bands to use are not specified, uses the first two bands. The normalized difference is computed as (first âˆ’ second) / (first + second)\n\nIt is important to understand that the `normalizedDifference` function works with an `image` as you can see by the argument `this:input (Image): The input image`.\nApplying the normalized difference function to a `ImageCollection` will not work. \n\n\n```js\n\n// normalizedDifference on a imageCollection will throw an error:\n// var ndvi_error = l8_bands.normalizedDifference([\"SR_B4\", \"SR_B5\"])\n\n\nvar ndvi = l8_bands.first().normalizedDifference([\"SR_B4\", \"SR_B5\"])\n\nprint(ndvi, \"NDVI single image\")\nMap.addLayer(ndvi, {}, \"NDVI\")\n```\n\n\n:::: {.column-margin}\n:::{.callout-note}\n## first\nThe `.first()` function will simply return the first image in the image collection.\n:::\n::::\n\n### Map functions\n\nIn order to apply a function to all the images in the image collection, we have to use the `.map` function.\nThe clearest way to use `.map` is to define a function beforehand with an image as an input argument and a return as in the following code snippet.\n\n```js\n// define function for NDWI for one image\nvar ndvi_function = function(img){\n  var ndvi = img.normalizedDifference([\"SR_B4\", \"SR_B5\"]).rename(\"NDVI\")\n  return img.addBands(ndvi)\n}\n\n\n// apply function to the first image\nvar ndvi = l8_bands.first().ndvi_function()\nprint(ndvi, \"NDVI single image\")\nMap.addLayer(ndvi, {}, \"B4, B5, NDVI\")\n```\n\n:::: {.column-margin}\n:::{.callout-note}\n## rename\nWith `.rename` you can give a new name to a band\n:::\n\n:::{.callout-note}\n## return\n`return img.addBands(ndvi)` means, that the output of this function is the original image with an added ndvi band.\n:::\n::::\n\n\n\n\nThe defined `ndvi_function` can then be applied to all images in the image collection with `.map` like this:\n\n\n```js\n// apply the function to all the images with map\nvar l8_ndvi = l8_bands.map(ndvi_function)\nprint(l8_ndvi)\n```\n\n## Export\n\nIf you search for \"Export\" in the docs panel, you should see that a `ImageCollection` cannot be exported out of Google Earth Engine. Instead, we have to convert out image collection to a single image (with multiple bands) in order to Export it to Google Drive, where we then can download the image for further analysis. With `clip` we also can finally reduce the image to just our area of interest. If you use `Export.image.toDrive` and your script works without error, the tasks panel should turn yellow and a new export task should appear there. Click on `Run` to actually start your script on the Google Servers and create an output in your Google Drive.\n\n```js\nvar l8_export = l8_ndvi.select(NDVI)\n                  .sort(\"system:time_start\")\n                  .toBands()\n                  .clip(aoi)\n\nExport.image.toDrive(\n  {image: l8_export,\n  scale: 30,\n  region: aoi\n  }\n)\n\n\n```\n\n\n\n## Code Summary\n\nHere is a condensed version of this tutorial.\n\n```js\n\n// area of interest\nvar aoi = ee.FeatureCollection(\"projects/gee-tutorial/assets/amtsvenn\");\n\n// define function for ndvi for one image\nvar ndvi_function = function(img){\n  var ndvi = img.normalizedDifference([\"SR_B4\", \"SR_B5\"]).rename(\"NDVI\")\n  return img.addBands(ndvi)\n}\n\n\n// Image Collection filtering, select bands and calculate ndvi\nvar l8 = ee.ImageCollection(\"LANDSAT/LC08/C02/T1_L2\")\n  .filterBounds(aoi)\n  .filterDate(\"2021-01-01\", \"2021-12-01\")\n  .filter(ee.Filter.lt('CLOUD_COVER', 30))\n  .select(\"SR_B5\", \"SR_B6\")\n  .map(ndvi_function)\n  .select(\"NDVI\")\n\n\nprint(l8, \"ImageCollection\")\n\n// image collection to multiband image\nvar ndvi_ts = l8.sort(\"system:time_start\").toBands().clip(aoi)\n\nprint(ndvi_ts, \"Multiband Image\")\nMap.addLayer(ndvi_ts, {}, \"NDVI) \n\n// Export\nExport.image.toDrive(\n  {image: ndvi_ts,\n  scale: 30,\n  region: aoi\n  }\n)\n\n```\n\n\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":false,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"message":false,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","number-sections":false,"output-file":"gee_introduction.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.550","number-depth":0,"theme":"materia","grid":{"sidebar-width":"350px"},"title":"Getting Started"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}